# Multi-stage Dockerfile for production deployment

# Build stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY ../../package*.json ../../
COPY ../../pnpm-workspace.yaml ../../

# Install pnpm
RUN npm install -g pnpm

# Copy shared packages and dependencies
COPY ../../packages ./packages
COPY ../../turbo.json ../../

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY . .

# Build the application
RUN pnpm run build

# Production stage
FROM node:18-alpine AS production

# Create app user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S backend -u 1001

# Set working directory
WORKDIR /app

# Install production dependencies only
COPY package*.json ./
RUN npm install -g pnpm
RUN pnpm install --frozen-lockfile --prod

# Copy built application from builder stage
COPY --from=builder --chown=backend:nodejs /app/dist ./dist
COPY --from=builder --chown=backend:nodejs /app/package.json ./

# Create logs directory
RUN mkdir -p logs && chown backend:nodejs logs

# Security: Remove package managers and unnecessary tools
RUN apk del npm
RUN rm -rf /usr/local/lib/node_modules/npm
RUN rm -rf /tmp/* /var/tmp/*

# Switch to non-root user
USER backend

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Set environment variables for production
ENV NODE_ENV=production
ENV PORT=8080
ENV LOG_LEVEL=warn
ENV LOG_FORMAT=json

# Start the application
CMD ["node", "dist/index.js"]